{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/components/LarekAPI.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/components/base/Model.ts","webpack://my-webpack-project/./src/components/AppData.ts","webpack://my-webpack-project/./src/components/base/Component.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/Page.ts","webpack://my-webpack-project/./src/components/Card.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["import { Api } from \"./base/api\";\nexport class LarekAPI extends Api {\n    constructor(cdn, baseUrl, options) {\n        super(baseUrl, options);\n        this.cdn = cdn;\n    }\n    getProductItem(id) {\n        return this.get(`/product/${id}`).then((item) => (Object.assign(Object.assign({}, item), { image: this.cdn + item.image })));\n    }\n    getProductList() {\n        return this.get('/product').then((data) => data.items.map((item) => (Object.assign(Object.assign({}, item), { image: this.cdn + item.image }))));\n    }\n}\n","export class Api {\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}))\n        };\n    }\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response.json()\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then(this.handleResponse);\n    }\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then(this.handleResponse);\n    }\n}\n","export const API_URL = `${process.env.API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${process.env.API_ORIGIN}/content/weblarek`;\nexport const settings = {};\n","// Гарда для проверки на модель\nexport const isModel = (obj) => {\n    return obj instanceof Model;\n};\n/**\n * Базовая модель, чтобы можно было отличить ее от простых объектов с данными\n */\nexport class Model {\n    constructor(data, events) {\n        this.events = events;\n        Object.assign(this, data);\n    }\n    // Сообщить всем что модель поменялась\n    emitChanges(event, payload) {\n        // Состав данных можно модифицировать\n        this.events.emit(event, payload !== null && payload !== void 0 ? payload : {});\n    }\n}\n","import { Model } from \"./base/Model\";\nexport class ProductItem extends Model {\n    // возможно здесь проверка на повторное добавление в корзину\n    get categoryStyle() {\n        switch (this.category) {\n            case \"софт-скил\":\n                return \"soft\";\n            case \"другое\":\n                return \"other\";\n            case \"дополнительное\":\n                return \"additional\";\n            case \"кнопка\":\n                return \"button\";\n            case \"хард-скил\":\n                return \"hard\";\n            default:\n                return this.category;\n        }\n    }\n    get priceText() {\n        if (this.price === null) {\n            return \"Бесценно\";\n        }\n        else\n            return String(this.price);\n    }\n}\nexport class AppState extends Model {\n    // loading: boolean;\n    // order: IOrder = {\n    //     email: '',\n    //     phone: '',\n    //     items: []\n    // };\n    // preview: string | null;\n    // formErrors: FormErrors = {};\n    // toggleOrderedLot(id: string, isIncluded: boolean) {\n    //     if (isIncluded) {\n    //         this.order.items = _.uniq([...this.order.items, id]);\n    //     } else {\n    //         this.order.items = _.without(this.order.items, id);\n    //     }\n    // }\n    // clearBasket() {\n    //     this.order.items.forEach(id => {\n    //         this.toggleOrderedLot(id, false);\n    //         this.catalog.find(it => it.id === id).clearBid();\n    //     });\n    // }\n    // getTotal() {\n    //     return this.order.items.reduce((a, c) => a + this.catalog.find(it => it.id === c).price, 0)\n    // }\n    setCatalog(items) {\n        this.catalog = items.map(item => new ProductItem(item, this.events));\n        this.emitChanges('items:changed', { catalog: this.catalog });\n    }\n}\n","/**\n * Базовый компонент\n */\nexport class Component {\n    constructor(container) {\n        this.container = container;\n        // Учитывайте что код в конструкторе исполняется ДО всех объявлений в дочернем классе\n    }\n    // Инструментарий для работы с DOM в дочерних компонентах\n    // Переключить класс\n    toggleClass(element, className, force) {\n        element.classList.toggle(className, force);\n    }\n    // Установить текстовое содержимое\n    setText(element, value) {\n        if (element) {\n            element.textContent = String(value);\n        }\n    }\n    // Сменить статус блокировки\n    setDisabled(element, state) {\n        if (element) {\n            if (state)\n                element.setAttribute('disabled', 'disabled');\n            else\n                element.removeAttribute('disabled');\n        }\n    }\n    // Скрыть\n    setHidden(element) {\n        element.style.display = 'none';\n    }\n    // Показать\n    setVisible(element) {\n        element.style.removeProperty('display');\n    }\n    // Установить изображение с алтернативным текстом\n    setImage(element, src, alt) {\n        if (element) {\n            element.src = src;\n            if (alt) {\n                element.alt = alt;\n            }\n        }\n    }\n    // Вернуть корневой DOM-элемент\n    render(data) {\n        Object.assign(this, data !== null && data !== void 0 ? data : {});\n        return this.container;\n    }\n}\n","export function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\n","import { Component } from \"./base/Component\";\nimport { ensureElement } from \"../utils/utils\";\nexport class Page extends Component {\n    // protected _wrapper: HTMLElement;\n    // protected _basket: HTMLElement;\n    constructor(container, events) {\n        super(container);\n        this.events = events;\n        // this._counter = ensureElement<HTMLElement>('.header__basket-counter');\n        this._catalog = ensureElement('.gallery');\n        // this._wrapper = ensureElement<HTMLElement>('.page__wrapper');\n        // this._basket = ensureElement<HTMLElement>('.header__basket');\n        // this._basket.addEventListener('click', () => {\n        //     this.events.emit('bids:open');\n        // });\n    }\n    // set counter(value: number) {\n    //     this.setText(this._counter, String(value));\n    // }\n    set catalog(items) {\n        this._catalog.replaceChildren(...items);\n    }\n}\n","import { ensureElement } from \"../utils/utils\";\nimport { Component } from \"./base/Component\";\nexport class Card extends Component {\n    constructor(blockName, container, actions) {\n        super(container);\n        this.blockName = blockName;\n        this._category = ensureElement(`.card__category`, container);\n        this._title = ensureElement(`.card__title`, container);\n        this._image = ensureElement(`.card__image`, container);\n        this._price = ensureElement(`.card__price`, container);\n        // this._button = ensureElement<HTMLButtonElement>(`.gallery__item`, container);\n        // if (actions?.onClick) {\n        //     if (this._button) {\n        //         this._button.addEventListener('click', actions.onClick);\n        //     } else {\n        //         container.addEventListener('click', actions.onClick);\n        //     }\n        // }\n    }\n    set id(value) {\n        this.container.dataset.id = value;\n    }\n    get id() {\n        return this.container.dataset.id || '';\n    }\n    set title(value) {\n        this.setText(this._title, value);\n    }\n    set image(value) {\n        this.setImage(this._image, value, this.title);\n    }\n    set category(value) {\n        this.toggleClass(this._category, `card__category_${value}`);\n    }\n    set price(value) {\n        if (value !== \"Бесценно\") {\n            this.setText(this._price, `${value} синапсов`);\n        }\n        else {\n            this.setText(this._price, `${value}`);\n        }\n    }\n}\nexport class CatalogItem extends Card {\n    // protected _status: HTMLElement;\n    constructor(container, actions) {\n        super('card-catalog', container, actions);\n        // this._status = ensureElement<HTMLElement>(`.card__status`, container);\n    }\n}\n// export type AuctionStatus = {\n//     status: string,\n//     time: string,\n//     label: string,\n//     nextBid: number,\n//     history: number[]\n// };\n// export class AuctionItem extends Card<HTMLElement> {\n//     protected _status: HTMLElement;\n//     constructor(container: HTMLElement, actions?: ICardActions) {\n//         super('lot', container, actions);\n//         this._status = ensureElement<HTMLElement>(`.lot__status`, container);\n//     }\n//     set status(content: HTMLElement) {\n//         this._status.replaceWith(content);\n//     }\n// }\n// interface IAuctionActions {\n//     onSubmit: (price: number) => void;\n// }\n// export class Auction extends Component<AuctionStatus> {\n//     protected _time: HTMLElement;\n//     protected _label: HTMLElement;\n//     protected _button: HTMLButtonElement;\n//     protected _input: HTMLInputElement;\n//     protected _history: HTMLElement;\n//     protected _bids: HTMLElement\n//     protected _form: HTMLFormElement;\n//     constructor(container: HTMLElement, actions?: IAuctionActions) {\n//         super(container);\n//         this._time = ensureElement<HTMLElement>(`.lot__auction-timer`, container);\n//         this._label = ensureElement<HTMLElement>(`.lot__auction-text`, container);\n//         this._button = ensureElement<HTMLButtonElement>(`.button`, container);\n//         this._input = ensureElement<HTMLInputElement>(`.form__input`, container);\n//         this._bids = ensureElement<HTMLElement>(`.lot__history-bids`, container);\n//         this._history = ensureElement<HTMLElement>('.lot__history', container);\n//         this._form = ensureElement<HTMLFormElement>(`.lot__bid`, container);\n//         this._form.addEventListener('submit', (event) => {\n//             event.preventDefault();\n//             actions?.onSubmit?.(parseInt(this._input.value));\n//             return false;\n//         });\n//     }\n//     set time(value: string) {\n//         this.setText(this._time, value);\n//     }\n//     set label(value: string) {\n//         this.setText(this._label, value);\n//     }\n//     set nextBid(value: number) {\n//         this._input.value = String(value);\n//     }\n//     set history(value: number[]) {\n//         this._bids.replaceChildren(...value.map(item => createElement<HTMLUListElement>('li', {\n//             className: 'lot__history-item',\n//             textContent: formatNumber(item)\n//         })));\n//     }\n//     set status(value: LotStatus) {\n//         if (value !== 'active') {\n//             this.setHidden(this._history);\n//             this.setHidden(this._form);\n//         } else {\n//             this.setVisible(this._history);\n//             this.setVisible(this._form);\n//         }\n//     }\n//     focus() {\n//         this._input.focus();\n//     }\n// }\n// export interface BidStatus {\n//     amount: number;\n//     status: boolean;\n// }\n// export class BidItem extends Card<BidStatus> {\n//     protected _amount: HTMLElement;\n//     protected _status: HTMLElement;\n//     protected _selector: HTMLInputElement;\n//     constructor(container: HTMLElement, actions?: ICardActions) {\n//         super('bid', container, actions);\n//         this._amount = ensureElement<HTMLElement>(`.bid__amount`, container);\n//         this._status = ensureElement<HTMLElement>(`.bid__status`, container);\n//         this._selector = container.querySelector(`.bid__selector-input`);\n//         if (!this._button && this._selector) {\n//             this._selector.addEventListener('change', (event: MouseEvent) => {\n//                 actions?.onClick?.(event);\n//             })\n//         }\n//     }\n//     set status({ amount, status }: BidStatus) {\n//         this.setText(this._amount, formatNumber(amount));\n//         if (status) this.setVisible(this._status);\n//         else this.setHidden(this._status);\n//     }\n// }\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","import './scss/styles.scss';\nimport { LarekAPI } from './components/LarekAPI';\nimport { API_URL, CDN_URL } from './utils/constants';\nimport { AppState } from './components/AppData';\nimport { Page } from './components/Page';\nimport { cloneTemplate, ensureElement } from './utils/utils';\nimport { CatalogItem } from './components/Card';\nimport { EventEmitter } from './components/base/events';\nconst events = new EventEmitter();\nconst api = new LarekAPI(CDN_URL, API_URL);\n// Чтобы мониторить все события, для отладки\nevents.onAll(({ eventName, data }) => {\n    console.log(eventName, data);\n});\n// Все шаблоны\nconst cardCatalogTemplate = ensureElement('#card-catalog');\n// const cardPreviewTemplate = ensureElement<HTMLTemplateElement>('#preview');\n// const auctionTemplate = ensureElement<HTMLTemplateElement>('#auction');\n// const cardBasketTemplate = ensureElement<HTMLTemplateElement>('#bid');\n// const bidsTemplate = ensureElement<HTMLTemplateElement>('#bids');\n// const basketTemplate = ensureElement<HTMLTemplateElement>('#basket');\n// const tabsTemplate = ensureElement<HTMLTemplateElement>('#tabs');\n// const soldTemplate = ensureElement<HTMLTemplateElement>('#sold');\n// const orderTemplate = ensureElement<HTMLTemplateElement>('#order');\n// const successTemplate = ensureElement<HTMLTemplateElement>('#success');\n// Модель данных приложения\nconst appData = new AppState({}, events);\n// Глобальные контейнеры\nconst page = new Page(document.body, events);\n// const modal = new Modal(ensureElement<HTMLElement>('#modal-container'), events);\n// Переиспользуемые части интерфейса\n// const bids = new Basket(cloneTemplate(bidsTemplate), events);\n// const basket = new Basket(cloneTemplate(basketTemplate), events);\n// const tabs = new Tabs(cloneTemplate(tabsTemplate), {\n//     onClick: (name) => {\n//         if (name === 'closed') events.emit('basket:open');\n//         else events.emit('bids:open');\n//     }\n// });\n// const order = new Order(cloneTemplate(orderTemplate), events);\n// Дальше идет бизнес-логика\n// Поймали событие, сделали что нужно\n// Изменились элементы каталога\nevents.on('items:changed', () => {\n    page.catalog = appData.catalog.map(item => {\n        const card = new CatalogItem(cloneTemplate(cardCatalogTemplate), {\n            onClick: () => events.emit('card:select', item)\n        });\n        return card.render({\n            // category: item.category,\n            title: item.title,\n            image: item.image,\n            // price: item.price\n        });\n    });\n    // page.counter = appData.getClosedLots().length;\n});\n// Отправлена форма заказа\n// events.on('order:submit', () => {\n//     api.orderLots(appData.order)\n//         .then((result) => {\n//             const success = new Success(cloneTemplate(successTemplate), {\n//                 onClick: () => {\n//                     modal.close();\n//                     appData.clearBasket();\n//                     events.emit('auction:changed');\n//                 }\n//             });\n//             modal.render({\n//                 content: success.render({})\n//             });\n//         })\n//         .catch(err => {\n//             console.error(err);\n//         });\n// });\n// Изменилось состояние валидации формы\n// events.on('formErrors:change', (errors: Partial<IOrderForm>) => {\n//     const { email, phone } = errors;\n//     order.valid = !email && !phone;\n//     order.errors = Object.values({phone, email}).filter(i => !!i).join('; ');\n// });\n// Изменилось одно из полей\n// events.on(/^order\\..*:change/, (data: { field: keyof IOrderForm, value: string }) => {\n//     appData.setOrderField(data.field, data.value);\n// });\n// Открыть форму заказа\n// events.on('order:open', () => {\n//     modal.render({\n//         content: order.render({\n//             phone: '',\n//             email: '',\n//             valid: false,\n//             errors: []\n//         })\n//     });\n// });\n// Открыть активные лоты\n// events.on('bids:open', () => {\n//     modal.render({\n//         content: createElement<HTMLElement>('div', {}, [\n//             tabs.render({\n//                 selected: 'active'\n//             }),\n//             bids.render()\n//         ])\n//     });\n// });\n// Открыть закрытые лоты\n// events.on('basket:open', () => {\n//     modal.render({\n//         content: createElement<HTMLElement>('div', {}, [\n//             tabs.render({\n//                 selected: 'closed'\n//             }),\n//             basket.render()\n//         ])\n//     });\n// });\n// Изменения в лоте, но лучше все пересчитать\n// events.on('auction:changed', () => {\n//     page.counter = appData.getClosedLots().length;\n//     bids.items = appData.getActiveLots().map(item => {\n//         const card = new BidItem(cloneTemplate(cardBasketTemplate), {\n//             onClick: () => events.emit('preview:changed', item)\n//         });\n//         return card.render({\n//             title: item.title,\n//             image: item.image,\n//             status: {\n//                 amount: item.price,\n//                 status: item.isMyBid\n//             }\n//         });\n//     });\n//     let total = 0;\n//     basket.items = appData.getClosedLots().map(item => {\n//         const card = new BidItem(cloneTemplate(soldTemplate), {\n//             onClick: (event) => {\n//                 const checkbox = event.target as HTMLInputElement;\n//                 appData.toggleOrderedLot(item.id, checkbox.checked);\n//                 basket.total = appData.getTotal();\n//                 basket.selected = appData.order.items;\n//             }\n//         });\n//         return card.render({\n//             title: item.title,\n//             image: item.image,\n//             status: {\n//                 amount: item.price,\n//                 status: item.isMyBid\n//             }\n//         });\n//     });\n//     basket.selected = appData.order.items;\n//     basket.total = total;\n// })\n// Открыть лот\n// events.on('card:select', (item: LotItem) => {\n//     appData.setPreview(item);\n// });\n// Изменен открытый выбранный лот\n// events.on('preview:changed', (item: LotItem) => {\n//     const showItem = (item: LotItem) => {\n//         const card = new AuctionItem(cloneTemplate(cardPreviewTemplate));\n//         const auction = new Auction(cloneTemplate(auctionTemplate), {\n//             onSubmit: (price) => {\n//                 item.placeBid(price);\n//                 auction.render({\n//                     status: item.status,\n//                     time: item.timeStatus,\n//                     label: item.auctionStatus,\n//                     nextBid: item.nextBid,\n//                     history: item.history\n//                 });\n//             }\n//         });\n//         modal.render({\n//             content: card.render({\n//                 title: item.title,\n//                 image: item.image,\n//                 description: item.description.split(\"\\n\"),\n//                 status: auction.render({\n//                     status: item.status,\n//                     time: item.timeStatus,\n//                     label: item.auctionStatus,\n//                     nextBid: item.nextBid,\n//                     history: item.history\n//                 })\n//             })\n//         });\n//         if (item.status === 'active') {\n//             auction.focus();\n//         }\n//     };\n//     if (item) {\n//         api.getLotItem(item.id)\n//             .then((result) => {\n//                 item.description = result.description;\n//                 item.history = result.history;\n//                 showItem(item);\n//             })\n//             .catch((err) => {\n//                 console.error(err);\n//             })\n//     } else {\n//         modal.close();\n//     }\n// });\n// Блокируем прокрутку страницы если открыта модалка\n// events.on('modal:open', () => {\n//     page.locked = true;\n// });\n// ... и разблокируем\n// events.on('modal:close', () => {\n//     page.locked = false;\n// });\n// Получаем лоты с сервера\napi.getProductList()\n    .then(appData.setCatalog.bind(appData))\n    .catch(err => {\n    console.error(err);\n});\n"],"names":["LarekAPI","_Api","_inherits","_super","_createSuper","cdn","baseUrl","options","_this","_classCallCheck","call","_createClass","key","value","getProductItem","id","_this2","this","get","concat","then","item","Object","assign","image","getProductList","_this3","data","items","map","Api","_a","arguments","length","undefined","headers","handleResponse","response","ok","json","Promise","reject","error","statusText","uri","fetch","method","post","body","JSON","stringify","API_URL","process","CDN_URL","Model","events","emitChanges","event","payload","emit","ProductItem","_Model","apply","category","price","String","AppState","_Model2","_super2","setCatalog","catalog","Component","container","toggleClass","element","className","force","classList","toggle","setText","textContent","setDisabled","state","setAttribute","removeAttribute","setHidden","style","display","setVisible","removeProperty","setImage","src","alt","render","isSelector","x","ensureElement","selectorElement","context","elements","ensureAllElements","document","Array","from","querySelectorAll","NodeList","isArray","Error","console","warn","pop","HTMLElement","Page","_Component","_catalog","set","_this$_catalog","replaceChildren","_toConsumableArray","CatalogItem","_Card","actions","Card","blockName","_category","_title","_image","_price","dataset","title","EventEmitter","_events","Map","on","eventName","callback","has","Set","add","off","size","forEach","subscribers","name","RegExp","test","onAll","offAll","trigger","api","_ref","log","cardCatalogTemplate","appData","page","cloneTemplate","query","content","firstElementChild","cloneNode","onClick","bind","err"],"sourceRoot":""}